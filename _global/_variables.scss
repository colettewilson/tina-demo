// Grid
//------------------------------------------------------------------------------
$maxWidth: 1400px;
$gridGutter: 16px;

@mixin gridWidth {
  max-width: $maxWidth;
  margin-right: auto;
  margin-left: auto;
}

@mixin gridPadding {
  padding-right: $gridGutter;
  padding-left: $gridGutter;

  @include breakpoint(large up) {
    padding-right: $gridGutter * 2;
    padding-left: $gridGutter * 2;
  }
}

// Breakpoints
//------------------------------------------------------------------------------

$breakpoints: (
  small: 0,
  medium: 740px,
  large: 1024px,
  xlarge: 1200px,
  xxlarge: 1400px,
);

@mixin breakpoint($breakpoint) {
  $bp: nth($breakpoint, 1);
  $max: 0;
  $dir: nth($breakpoint, 2);
  $query: "only screen";

  @if map-has-key($breakpoints, $bp) {
    $min: map-get($breakpoints, $bp);
    $nextIndex: index($breakpoints, $bp $min) + 1;
    $next: if(
      $nextIndex > length($breakpoints),
      null,
      nth($breakpoints, $nextIndex)
    );

    @if $dir == "only" {
      $query: $query + " and (min-width: #{$min})";

      @if $next == null {
        $max: null;
      } @else {
        $max: nth($next, 2) - (1 / 16);
        $query: $query + " and (max-width: #{$max})";
      }
    } @else if $dir == "up" {
      $query: $query + " and (min-width: #{$min})";
    } @else if $dir == "down" {
      $max: nth($next, 2) - (1 / 16);
      $query: $query + " and (max-width: #{$max})";
    }

    @media #{$query} {
      @content;
    }
  }
}

/// Apply a custom font with fallbacks while loading - avoids FOIT.
/// @prop {String|List} $font - Custom font name(s) as specified in fonts.coffee.
/// @prop {String|List} $fallbacks - Fallback font name(s) to use until custom fonts load. Should
///   end with a generic family without quotes, e.g. sans-serif.
/// @see https://www.filamentgroup.com/lab/font-events.html.
@mixin font-family($font, $fallbacks) {
  font-family: $font, $fallbacks;

  .fonts-loading & {
    font-family: $fallbacks;
  }
}

// Fonts
//------------------------------------------------------------------------------

$fallbacks: Helvetica Neue, Helvetica, Arial, sans-serif;

@mixin opensans($weight: 300, $style: normal) {
  @include font-family("Open Sans", $fallbacks);
  font-style: $style;
  font-weight: $weight;
}

@mixin font-smoothing($value: on) {
  @if $value == on {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  } @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

// Typography
//------------------------------------------------------------------------------

@mixin title {
  @include opensans(700);
  letter-spacing: 0.05em;
  line-height: 1.5;
}

@mixin h1 {
  @include title;
  @include opensans(800);
  font-size: 32px;

  @include breakpoint(medium up) {
    font-size: 48px;
  }
}

@mixin h2 {
  @include title;
  font-size: 24px;

  @include breakpoint(medium up) {
    font-size: 32px;
  }
}

@mixin body {
  @include opensans;
  font-size: 16px;
  letter-spacing: 0.03em;
  line-height: 1.3;

  @include breakpoint(medium up) {
    font-size: 18px;
  }
}

// Colors
//------------------------------------------------------------------------------

$colors: (
  // Brand colours
  // Tones
);

@function color($color) {
  @return map-get($colors, $color);
}

// Layout
//------------------------------------------------------------------------------

@mixin hideScrollbars {
  scrollbar-width: none;
  // sass-lint:disable no-vendor-prefixes
  -ms-overflow-style: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin bgImg {
  background-repeat: no-repeat;
  background-size: cover;
}

@mixin visuallyHidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  white-space: nowrap; /* added line */
}

// Block Sizings
//------------------------------------------------------------------------------

$blocks: (
  4xlarge: 9rem,
  3xlarge: 7rem,
  2xlarge: 5rem,
  xlarge: 4rem,
  large: 3rem,
  medium: 2rem,
  small: 0.5rem,
  gutter: 1rem,
);

@function block($block) {
  @return map-get($blocks, $block);
}

// Animation
//------------------------------------------------------------------------------

@mixin transition($props, $ease: ease, $duration: 250ms) {
  transition-duration: $duration;
  transition-property: $props;
  transition-timing-function: $ease;
}

// Theme globals
//------------------------------------------------------------------------------
